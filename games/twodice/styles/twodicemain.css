/* CSS Custom Properties for responsive sizing based on game area width */
:root {
    --game-area-width: 100%; /* Will be updated by JavaScript with actual game area width */
    --sum-box-size: 8%; /* 8% of actual game area width for sum boxes */
    --sum-bar-width-multiplier: 6.5; /* How many box widths for sum bar */
    --plus-sign-size: 7%; /* 7% of game area width for plus sign */
}

/* Prevent scrolling - game always fits on screen */
html, body {
    overflow: hidden !important;
    height: 100vh;
    max-height: 100vh;
    margin: 0;
    padding: 0;
    /* Disable touch interactions except for buttons */
    touch-action: none;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    user-select: none;
}

/* Re-enable touch for interactive elements */
button, a, input, [role="button"] {
    touch-action: manipulation !important;
    -webkit-touch-callout: default !important;
    pointer-events: auto !important;
}

/* Ensure game fits perfectly */
body {
    display: flex;
    flex-direction: column;
}

/* Game area with initial fade state */
.game-area {
    display: block;
    opacity: 0;
    transition: opacity 1s ease-in-out;
    position: relative;
    /* Width, margins, and bottom spacing set by ButtonBar system */
    /* DO NOT override these - they are calculated by the universal system */
}

.game-area.loaded {
    opacity: 1;
}

/* Left game area: 0% to 46% of game area width */
.left-side {
    position: absolute;
    left: 0%;
    width: 46%;
    top: 0%;
    height: 100%;
    /* Visual debugging - remove in production */
    /* border: 1px dashed rgba(255, 0, 0, 0.3); */
    z-index: 5; /* Above rainbow, below dice */
}

/* Left flash area for green flashing */
.left-flash-area {
    position: absolute;
    left: 0%;
    width: 46%;
    top: 0%;
    height: 100%;
    pointer-events: none;
    transition: background-color 0.2s ease;
    z-index: 2; /* Above game areas but below dice */
}

/* Middle section - central bar with plus sign: 46% to 54% of game area width */
.middle-section {
    position: absolute;
    left: 46%;
    width: 8%;
    top: 0;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    background: linear-gradient(135deg, #f8f9fa, #e9ecef);
    border-left: 1px dotted rgba(0, 0, 0, 0.3);
    border-right: 1px dotted rgba(0, 0, 0, 0.3);
    z-index: 0; /* Below game area background and rainbow */
}

.plus-sign {
    display: flex;
    justify-content: center;
    align-items: center;
    /* Red circle: 7% of game area width for both dimensions (perfect circle) */
    width: var(--plus-sign-size);
    height: var(--plus-sign-size);
    background: #dc3545;
    border-radius: 50%;
    box-shadow: 0 8px 25px rgba(220, 53, 69, 0.3);
    z-index: 10;
    position: relative;
}

.plus-sign i {
    font-size: calc(var(--plus-sign-size) * 0.4); /* 40% of plus sign size */
    color: white;
    font-weight: bold;
}

/* Right game area: 54% to 100% of game area width */
.right-side {
    position: absolute;
    left: 54%;
    width: 46%;
    top: 0%;
    height: 100%;
    /* Visual debugging - remove in production */
    /* border: 1px dashed rgba(0, 255, 0, 0.3); */
    z-index: 5; /* Above rainbow, below dice */
}

/* Right flash area for green flashing */
.right-flash-area {
    position: absolute;
    left: 54%;
    width: 46%;
    top: 0%;
    height: 100%;
    pointer-events: none;
    transition: background-color 0.2s ease;
    z-index: 2; /* Above game areas but below dice */
}

/* Area flashing styles */
.left-flash-area.area-flash,
.right-flash-area.area-flash {
    background-color: rgba(144, 238, 144, 0.2) !important;
    transition: background-color 1s ease-in-out;
}

/* 3D Dice Styling - Square dice with height matching width based on game area width */
.dice {
    /* Size: 12% of game area width for width, height should match width in pixels */
    width: 12%;
    height: 12%; /* This will be overridden by JavaScript to match width in pixels */
    position: absolute;
    transform-style: preserve-3d;
    opacity: 0;
    z-index: 10; /* Above everything except UI elements */
    transition: opacity 1s ease-in-out;
    transform-origin: center center;
    /* Ensure dice container is transparent */
    background: transparent !important;
    background-color: transparent !important;
    /* Disable touch interactions */
    pointer-events: none;
    touch-action: none;
}

/* Left dice positioning: centered at (23%, 50%) of game area */
.dice.left-dice {
    left: calc(23% - 6%); /* 23% minus half dice width (6%) */
    top: calc(50% - 6%); /* 50% minus half dice height (6%) */
}

/* Right dice positioning: centered at (77%, 50%) of game area */
.dice.right-dice {
    left: calc(77% - 6%); /* 77% minus half dice width (6%) */
    top: calc(50% - 6%); /* 50% minus half dice height (6%) */
}

/* Dice faces - completely transparent containers for 3D positioning */
.dice-face {
    position: absolute;
    width: 100%;
    height: 100%;
    background: transparent !important;
    background-color: transparent !important;
    background-image: none !important;
    border: none !important;
    border-radius: 0 !important;
    box-shadow: none !important;
    outline: none !important;
    opacity: 1;
    backface-visibility: hidden;
    box-sizing: border-box;
    color: transparent;
    /* Disable touch interactions */
    pointer-events: none;
    touch-action: none;
}

/* The actual colored surface of each face */
.dice-face-surface {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border: 3px solid #333;
    border-radius: 15px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    box-sizing: border-box;
    z-index: 1;
    /* Disable touch interactions */
    pointer-events: none;
    touch-action: none;
}

/* Inner face - fills gaps during rotation */
.dice-face-inner {
    position: absolute;
    top: 5%;
    left: 5%;
    width: 90%;
    height: 90%;
    border: none;
    border-radius: 0;
    box-sizing: border-box;
    z-index: 0;
    /* Disable touch interactions */
    pointer-events: none;
    touch-action: none;
}

/* Dots container sits above the colored surface */
.dice-dots-container {
    position: relative;
    z-index: 2;
    width: 100%;
    height: 100%;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    gap: 8px;
    padding: 12px;
    box-sizing: border-box;
    /* Disable touch interactions */
    pointer-events: none;
    touch-action: none;
}

/* Dice dots styling - sized relative to game area width for consistency */
.dice-dot {
    width: 1.8%; /* 1.8% of game area width */
    height: 1.8%; /* Same as width for perfect circles */
    border-radius: 50%;
    background-color: #333;
    margin: auto;
    opacity: 0;
    transition: opacity 0.1s ease;
    /* Disable touch interactions */
    pointer-events: none;
    touch-action: none;
}

.dice-dot.active {
    opacity: 1;
}

/* Final dice state - when animation is complete */
.dice.dice-final {
    opacity: 1 !important;
    transition: transform 0.8s ease-out !important;
}

/* Sum row at bottom - positioned using game area percentages */
.sum-row {
    position: absolute;
    bottom: 3%; /* 3% of game area height */
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    align-items: center;
    gap: 2%;
    z-index: 15;
    
    /* Responsive sizing based on game area */
    width: calc(var(--sum-box-size) * var(--sum-bar-width-multiplier)); /* 7% * 6.5 = 45.5% of game area width */
    height: calc(var(--sum-box-size) + 6%); /* box height + 3% padding top + 3% padding bottom */
    
    background: rgba(255, 255, 255, 0.95);
    padding: 1.5% 2%; /* 1.5% top/bottom, 2% left/right of game area */
    border-radius: 15px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    border: 2px solid #e0e0e0;
    box-sizing: border-box;
    opacity: 0;
    transition: opacity 1s ease-in-out;
    
    /* Re-enable touch for sum row interactions */
    touch-action: manipulation;
    pointer-events: auto;
}

.sum-row.loaded {
    opacity: 1;
}

/* Prevent sum row from fading during transitions */
.sum-row.fade-out,
.sum-row.fade-in {
    animation: none !important;
    opacity: 1 !important;
    transform: translateX(-50%) !important;
}

/* Sum row symbols with proper responsive sizing */
.sum-plus-sign,
.sum-equals-sign {
    font-size: calc(var(--sum-box-size) * 0.52); /* 52% of box size for proportional text */
    font-weight: bold;
    color: #333;
    min-width: calc(var(--sum-box-size) * 0.75); /* 75% of box size for minimum width */
    text-align: center;
    flex-shrink: 0;
}

.left-sum-box,
.right-sum-box,
.total-sum-box {
    width: var(--sum-box-size); /* 8% of game area width */
    height: var(--sum-box-size); /* Same as width - perfect squares */
    flex-shrink: 0;
}

/* Input boxes for sum row */
.input-box {
    background: white;
    border: 4px solid #007bff;
    border-radius: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: calc(var(--sum-box-size) * 0.6); /* Font size proportional to box size */
    font-weight: bold;
    color: #333;
    box-shadow: 0 8px 25px rgba(0, 123, 255, 0.3);
    transition: all 0.3s ease;
}

.input-box.flashing {
    animation: flashingBox 1s ease-in-out infinite;
}

.input-box.filled {
    background: #e8f5e8;
    border-color: #28a745;
    animation: none;
}

.input-box.box-flash {
    background: rgba(144, 238, 144, 0.3) !important;
    border-color: #28a745 !important;
    transition: all 1s ease-in-out;
}

@keyframes flashingBox {
    0%, 100% {
        box-shadow: 0 8px 25px rgba(0, 123, 255, 0.3);
        transform: scale(1);
    }
    50% {
        box-shadow: 0 12px 35px rgba(0, 123, 255, 0.6);
        transform: scale(1.05);
    }
}

.check-mark {
    font-size: calc(var(--sum-box-size) * 0.6); /* Font size proportional to box size */
    color: #28a745;
    opacity: 0;
    transition: opacity 0.5s ease;
    min-width: calc(var(--sum-box-size) * 0.7); /* 70% of box size for minimum width */
    text-align: center;
    flex-shrink: 0;
    margin-left: 1.5%;
}

.check-mark.visible {
    opacity: 1;
}

/* Fade animations - exclude sum row */
.fade-out:not(.sum-row) {
    animation: fadeOut 1s ease-out forwards;
}

.fade-in:not(.sum-row) {
    animation: fadeIn 1s ease-in forwards;
}

@keyframes fadeOut {
    from {
        opacity: 1;
        transform: scale(1);
    }
    to {
        opacity: 0;
        transform: scale(0.9);
    }
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: scale(0.9);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

/* Game completion modal */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: transparent;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    pointer-events: none;
    transition: opacity 0.3s ease;
}

.modal.hidden {
    opacity: 0;
    pointer-events: none;
}

.modal-content {
    background: #4caf50;
    color: white;
    padding: 40px;
    border-radius: 20px;
    text-align: center;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    max-width: 400px;
    width: 90%;
    pointer-events: auto;
    animation: modalAppear 0.5s ease;
    /* Re-enable touch for modal */
    touch-action: manipulation;
}

@keyframes modalAppear {
    from { 
        opacity: 0; 
        transform: scale(0.5); 
    }
    to { 
        opacity: 1; 
        transform: scale(1); 
    }
}

.modal-content h2 {
    margin: 0 0 30px 0;
    font-size: 2.5rem;
    color: white;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.play-again-btn {
    background: #28a745;
    color: white;
    border: none;
    padding: 15px 30px;
    font-size: 1.5rem;
    font-weight: bold;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
    /* Re-enable touch for button */
    touch-action: manipulation;
    pointer-events: auto;
}

.play-again-btn:hover {
    background: #218838;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
}

.play-again-btn:active {
    transform: translateY(0);
}

/* Star celebration animation */
.completion-star {
    animation: starSparkle 1.5s ease-out forwards;
    transform-origin: center;
    position: absolute;
    font-size: 24px;
    pointer-events: none;
    z-index: 1000;
    /* Disable touch interactions */
    touch-action: none;
}

@keyframes starSparkle {
    0% {
        opacity: 0;
        transform: scale(0) rotate(0deg);
    }
    50% {
        opacity: 1;
        transform: scale(1.2) rotate(180deg);
    }
    100% {
        opacity: 0;
        transform: scale(0.8) rotate(360deg);
    }
}

/* Enhanced completion effects */
.completion-effect {
    pointer-events: none;
    touch-action: none;
}
